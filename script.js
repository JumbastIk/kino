// ====== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–ò–õ–¨–ú–û–í –ò –ö–ê–¢–ï–ì–û–†–ò–ô ======

// –°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∏–ª—å–º–∞ (–≤–µ–¥—ë—Ç –Ω–∞ movie.html?id=‚Ä¶)
function createMovieCard(movie) {
  const link = document.createElement('a');
  link.href = `movie.html?id=${encodeURIComponent(movie.id)}`;
  link.className = 'movie-link';
  link.style.textDecoration = 'none';

  const card = document.createElement('div');
  card.className = 'movie-card';
  card.innerHTML = `
    <img src="${movie.poster}" alt="${movie.title}" />
    <h3>${movie.title}</h3>
    <p>${movie.desc}</p>
  `;
  link.appendChild(card);
  return link;
}

// –†–µ–Ω–¥–µ—Ä–∏—Ç –≥–ª–∞–≤–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –ø–æ data-movie-ids
function renderMainSlider() {
  const main = document.getElementById('mainSlider');
  if (!main) return;

  const ids = (main.dataset.movieIds || '')
    .split(',')
    .map(x => x.trim())
    .filter(Boolean);

  main.innerHTML = '';
  main.style.display = 'flex';
  main.style.overflowX = 'auto';

  movies
    .filter(m => ids.includes(m.id))
    .forEach(m => main.appendChild(createMovieCard(m)));
}

// –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function renderCategories() {
  document.querySelectorAll('.category').forEach(sec => {
    const genre = sec.dataset.categoryId;
    const slider = sec.querySelector('.slider');
    if (!genre || !slider) return;

    slider.innerHTML = '';
    slider.style.display = 'flex';
    slider.style.overflowX = 'auto';

    movies
      .filter(m => m.category === genre)
      .forEach(m => slider.appendChild(createMovieCard(m)));
  });
}

// –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ ‚Äπ ‚Ä∫ –¥–ª—è –≤—Å–µ—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤
function initSliderControls() {
  document.querySelectorAll('.slider-wrapper').forEach(wrap => {
    const slider = wrap.querySelector('.slider');
    const prevBtn = wrap.querySelector('.slider-btn.prev');
    const nextBtn = wrap.querySelector('.slider-btn.next');
    if (!slider || !prevBtn || !nextBtn) return;

    const step = slider.offsetWidth * 0.8;
    prevBtn.addEventListener('click', () => {
      slider.scrollBy({ left: -step, behavior: 'smooth' });
    });
    nextBtn.addEventListener('click', () => {
      slider.scrollBy({ left: step, behavior: 'smooth' });
    });
  });
}

// ====== –õ–û–ì–ò–ö–ê –û–ù–õ–ê–ô–ù-–ö–û–ú–ù–ê–¢ –ß–ï–†–ï–ó API ======

const API_URL = '/api/rooms';

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadRooms() {
  const res = await fetch(API_URL);
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç');
  return await res.json();
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ
async function createRoom(title) {
  if (!title) return;
  const btn = document.querySelector('button[onclick^="window.createRoom"]');
  if (btn) {
    btn.disabled = true;
    btn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
  }
  let roomId = null;
  try {
    // 1. –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë id
    const res = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title })
    });
    const data = await res.json();
    roomId = data.id;

    // 2. –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const input = document.getElementById('newRoomTitle');
    if (input) input.value = '';

    // 3. –ñ–¥—ë–º, –ø–æ–∫–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ (–¥–æ 2 —Å–µ–∫—É–Ω–¥, —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)
    let found = false;
    for (let i = 0; i < 5; i++) {
      await renderRooms(roomId);
      const rooms = await loadRooms();
      if (rooms.some(r => r.id === roomId)) {
        found = true;
        break;
      }
      await new Promise(r => setTimeout(r, 400));
    }
    if (!found) {
      alert('–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
  } catch (e) {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: ' + e.message);
  } finally {
    if (btn) {
      btn.disabled = false;
      btn.textContent = '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É';
    }
  }
}

// –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤ —Å–ª–∞–π–¥–µ—Ä–µ, –≤—ã–¥–µ–ª—è—è –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –µ—ë id)
async function renderRooms(highlightRoomId = null) {
  const slider = document.getElementById('roomsSlider');
  if (!slider) return;
  let rooms = [];
  try {
    rooms = await loadRooms();
  } catch (e) {
    slider.innerHTML = '<div style="color:red;padding:16px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç</div>';
    return;
  }

  slider.innerHTML = '';
  rooms.forEach(room => {
    const slide = document.createElement('div');
    slide.className = 'slide';
    if (highlightRoomId && room.id === highlightRoomId) {
      slide.style.border = '2px solid #ff9800';
      slide.style.background = '#222';
    }
    slide.innerHTML = `
      <a href="room.html?roomId=${encodeURIComponent(room.id)}" class="room-link">
        <div class="room-icon">üé•</div>
        <div class="room-info">
          <div class="room-title">${room.title}</div>
          <div class="room-viewers">${room.viewers || 1} —Å–º–æ—Ç—Ä—è—Ç</div>
        </div>
        <div class="room-timer">${room.created_at ? new Date(room.created_at).toLocaleTimeString() : ''}</div>
      </a>
    `;
    slider.appendChild(slide);
  });
}

// ====== –°–¢–ê–†–¢ –ü–û –ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´ ======
document.addEventListener('DOMContentLoaded', () => {
  renderMainSlider();
  renderCategories();
  initSliderControls();
  renderRooms();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
window.createRoom = createRoom;